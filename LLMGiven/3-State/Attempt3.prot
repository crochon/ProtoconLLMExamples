constant N := 3;

direct variable t[Nat % N] <- Nat % 2;
puppet variable e[Nat % N] <- Nat % 2;
puppet variable ready[Nat % N] <- Nat % 2;

// Future & Shadow condition to ensure legitimate states
(future & shadow)
  (unique i <- Nat % N :
   i == 0 && t[i-1] == t[i]  // Bot has the token
   ||
   i != 0 && t[i-1] != t[i]  // P[i] has the token
  );

// Process Bot (operates on node 0)
process Bot[i <- Nat % 1]
{
  // i==0
  read:  e[i-1], t[i-1];
  write: e[i], t[i], ready[i];

  shadow action: 
    ( t[i-1] == t[i] --> t[i] := 1 - t[i-1]; ready[i] := 1; )
    ( t[i-1] != t[i] --> ready[i] := 0; );
}

// Process P (operates on nodes 1 to N-1)
process P[j <- Nat % (N-1)]
{
  let i := j+1; // We really want P[1],...,P[N-1] rather than P[0],...,P[N-2].

  read:  e[i-1], t[i-1];
  write: e[i], t[i], ready[i];

  shadow action: 
    ( t[i-1] != t[i] --> t[i] := t[i-1]; ready[i] := 1; )
    ( t[i-1] == t[i] --> ready[i] := 0; );
}

// Initial state definition (outside future & shadow)
forall i <- Nat % N :
  t[i] := 0;  // Initialize token variable to 0
  e[i] := 0;  // Initialize puppet variable e to 0
  ready[i] := 0;  // Initialize ready variable to 0

// System behavior (future & shadow to ensure legitimate states)
(future & shadow)
  (unique i <- Nat % N :
   i == 0 && t[i-1] == t[i]  // Bot has the token
   ||
   i != 0 && t[i-1] != t[i]  // P[i] has the token
  );