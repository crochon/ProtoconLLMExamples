constant N := 3;
constant M := 2;

// State variables
shadow variable e[Nat % N] <- Nat % 2;
puppet variable x[Nat % N] <- Nat % M;

// Invariant using only shadow variables
((future & silent) % puppet)
  (forall i <- Nat % N :
    !(e[i] == 1 && e[i+1] == 1) &&
    (e[i-1] == 1 || e[i] == 1 || e[i+1] == 1)
  );

// Process definitions
process P[i <- Nat % N]
{
  read: x[i-1];
  read: x[i+1];
  write: e[i];
  write: x[i];         // write to x[i] not really needed unless system sets x
  write: e[i+1];       // write to e[i+1] needed for constraint (adjacency)

  puppet action:
    (x[i] == 1 && x[i-1] == 0 && x[i+1] == 0 --> e[i] := 1;)
    (!(x[i] == 1 && x[i-1] == 0 && x[i+1] == 0) --> e[i] := 0;);
}
