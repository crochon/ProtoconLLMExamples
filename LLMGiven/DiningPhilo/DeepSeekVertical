// The Dining Philosophers Problem.
// This version breaks symmetry by assuming a coloring.

constant N := 7;  // Number of philosophers

variable hungry[Nat % N] <- Nat % 2;
variable chopstick[Nat % (2*N)] <- Nat % 2;
variable cgt[Nat % (2*N)] <- Nat % 2;

// Converge to a state where no philosopher is hungry or has a chopstick.
(future & future silent)
  (forall i <- Nat % N : true
   && hungry[i]==0
   && chopstick[2*i  ]==0
   && chopstick[2*i+1]==0
  );

// Assume two philosophers can't have the same chopstick.
(assume & closed)
  (forall i <- Nat % N :
   chopstick[2*i+1]==0 || chopstick[2*i+2]==0
  );

// Assume a coloring.
// This allows there to be a symmetric solution.
// Values cgt[2*i] and cgt[2*i+1] denote whether P[i]'s color is greater
// than   P[i-1]   and P[i+1]     respectively.
(assume & closed)
  ((forall i <- Nat % N : cgt[2*i+1]!=cgt[2*i+2])
   &&
   (exists i <- Nat % N : cgt[2*i] == cgt[2*i+1])
  );

process P[i <- Nat % N]
{
  let L := 2*i;
  let R := 2*i+1;

  // Whether the philosopher is hungry.
  write: hungry[i];

  // Read and write chopsticks, with circular indexing.
  read: chopstick[(L-1) % (2*N)];
  write: chopstick[L];
  write: chopstick[R];
  read: chopstick[(R+1) % (2*N)];

  // Whether neighbors are hungry.
  read: hungry[(i-1) % N];
  read: hungry[(i+1) % N];

  // Whether this philosopher's color value is greater
  // than the color values of the left and right neighbors.
  read: cgt[L];
  read: cgt[R];

  predicate HasChopsticks :=
    (chopstick[L]==1 && chopstick[R]==1);

  predicate hungry_L := hungry[(i-1) % N]==1;
  predicate hungry_R := hungry[(i+1) % N]==1;

  // Permit actions where hungry status is not changed.
  permit:
    ( true --> hungry[i]; )
    ;

  // Can only change to be not hungry when having chopsticks.
  permit:
    ( HasChopsticks && hungry[i]==1 --> hungry[i]:=0; _; )
    ;

  // Puppet rules for releasing chopsticks and updating state.
  puppet:
    ( HasChopsticks -=> hungry[i]:=0; )
    ( hungry[i]==0 -=> chopstick[L]:=0; chopstick[R]:=0; )
    ( cgt[L]==0 && hungry_L -=> chopstick[L]:=0; )
    ( cgt[R]==0 && hungry_R -=> chopstick[R]:=0; )

    // Pick up left chopstick if conditions are met.
    ( hungry[i]==1 && (cgt[L]==1 || !hungry_L) && chopstick[(L-1) % (2*N)]==0
     -=> chopstick[L]:=1;
    )
    // Pick up right chopstick if conditions are met.
    ( hungry[i]==1 && (cgt[R]==1 || !hungry_R) && chopstick[(R+1) % (2*N)]==0
     -=> chopstick[R]:=1;
    )
    ;
}