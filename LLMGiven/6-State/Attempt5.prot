constant N := 5;  // Number of nodes
constant M := 3;  // Number of states for puppet variable x

direct variable t[Nat % N] <- Nat % 2;
puppet variable x[Nat % N] <- Nat % M;

// Future & Shadow condition for legitimate states
(future & shadow)
  (unique i <- Nat % N :
   i == 0 && t[i-1] == t[i]  // Bot has token when t matches predecessor
   || 
   i != 0 && t[i-1] != t[i]  // P[i] has token when t differs from predecessor
  );

// Process Bot (node 0)
process Bot[i <- Nat % 1]
{
  read: t[i-1], x[i-1];
  write: t[i], x[i];
  
  shadow action:  // Fixed: Added semicolon here
    ( t[i-1] == t[i] --> t[i] := 1 - t[i-1]; x[i] := (x[i-1] + 1) % M; );
}

// Process P (nodes 1..N-1)
process P[j <- Nat % (N-1)]
{
  let i := j+1;
  read: t[i-1], x[i-1];
  write: t[i], x[i];
  
  shadow action:  // Fixed: Added semicolon here
    ( t[i-1] != t[i] --> t[i] := t[i-1]; x[i] := (x[i-1] + 1) % M; );
}

// Active shadow ensures liveness
(future & active shadow)
  (unique i <- Nat % N :
   i == 0 && t[i-1] == t[i] && x[i-1] == x[i]
   ||
   i != 0 && t[i-1] != t[i] && x[i-1] != x[i]
  )